{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ABAP Development & Dictionary This repository includes helpful objects regarding ABAP development & dictionary.","title":"Home"},{"location":"#abap-development-dictionary","text":"This repository includes helpful objects regarding ABAP development & dictionary.","title":"ABAP Development &amp; Dictionary"},{"location":"config/","text":"Configuration ADDICT needs zero configuration. It will run with its default configuration out of the box. So everything below is optional. System rules Check the details of system rules here . Customer development objects ADDICT needs to know which ABAP objects are developed by you. By default, ADDICT will assume that Y- and Z- objects are developed by yourself. However, if you have custom namespaces or something, you should register those (along Y Z ) into the table YTADDICT_NSOBJ . Class definitions YTADDICT_CLASS will allow you to do some optional definitions per ABAP class. Field Description Default value CLSNAME Name of the class DISABLE_INHERIT X = Class will be invisible in inheritance queries of YCL_ADDICT_CLASS","title":"Configuration"},{"location":"config/#configuration","text":"ADDICT needs zero configuration. It will run with its default configuration out of the box. So everything below is optional.","title":"Configuration"},{"location":"config/#system-rules","text":"Check the details of system rules here .","title":"System rules"},{"location":"config/#customer-development-objects","text":"ADDICT needs to know which ABAP objects are developed by you. By default, ADDICT will assume that Y- and Z- objects are developed by yourself. However, if you have custom namespaces or something, you should register those (along Y Z ) into the table YTADDICT_NSOBJ .","title":"Customer development objects"},{"location":"config/#class-definitions","text":"YTADDICT_CLASS will allow you to do some optional definitions per ABAP class. Field Description Default value CLSNAME Name of the class DISABLE_INHERIT X = Class will be invisible in inheritance queries of YCL_ADDICT_CLASS","title":"Class definitions"},{"location":"install/","text":"Installation As a prerequisite, you should install SimBal first. You may install Addict to your system using abapGit .","title":"Installation"},{"location":"install/#installation","text":"As a prerequisite, you should install SimBal first. You may install Addict to your system using abapGit .","title":"Installation"},{"location":"object/","text":"Object index Significant classes within the package: Class Description Relevant T-Code YCL_ADDICT_ALV ALV helper YCL_ADDICT_BDC Batch Input helper SM35 YCL_ADDICT_CLASS Represents an ABAP class SE24 YCL_ADDICT_DATA_ELEMENT Represents a data element SE11 YCL_ADDICT_DOMAIN Represents a domain SE11 YCL_ADDICT_DYNAMIC_ITAB Dynamic internal table helper YCL_ADDICT_PACKAGE Represents an ABAP package SE80 YCL_ADDICT_SE01_READER Reads request status from source system SE01 YCL_ADDICT_TABLE Represents a database table, structure or view SE11 YCL_ADDICT_TABLE_FIELD Represents a field of a table SE11 YCL_ADDICT_TADIR_READER Reads TADIR from the local or remote system SE16 YCL_ADDICT_TEXT_TOOLKIT Provides some useful text utilities YCL_ADDICT_TOOLKIT Provides some useful data dictionary utilities YCL_ADDICT_TPALOG_READER Reads request status from target systems STMS YCL_ADDICT_TRANSPORT_REQUEST Represents a transport request SE01 YCL_ADDICT_TRANSPORT_REQ_IMP Imports a transport request in the target system STMS Most of those objects provide multition design pattern functionality. Significant CDS views within the package: View Description YV_ADDICT_SYSTEM_DEFINITIONS Custom ADDICT settings","title":"Object Index"},{"location":"object/#object-index","text":"Significant classes within the package: Class Description Relevant T-Code YCL_ADDICT_ALV ALV helper YCL_ADDICT_BDC Batch Input helper SM35 YCL_ADDICT_CLASS Represents an ABAP class SE24 YCL_ADDICT_DATA_ELEMENT Represents a data element SE11 YCL_ADDICT_DOMAIN Represents a domain SE11 YCL_ADDICT_DYNAMIC_ITAB Dynamic internal table helper YCL_ADDICT_PACKAGE Represents an ABAP package SE80 YCL_ADDICT_SE01_READER Reads request status from source system SE01 YCL_ADDICT_TABLE Represents a database table, structure or view SE11 YCL_ADDICT_TABLE_FIELD Represents a field of a table SE11 YCL_ADDICT_TADIR_READER Reads TADIR from the local or remote system SE16 YCL_ADDICT_TEXT_TOOLKIT Provides some useful text utilities YCL_ADDICT_TOOLKIT Provides some useful data dictionary utilities YCL_ADDICT_TPALOG_READER Reads request status from target systems STMS YCL_ADDICT_TRANSPORT_REQUEST Represents a transport request SE01 YCL_ADDICT_TRANSPORT_REQ_IMP Imports a transport request in the target system STMS Most of those objects provide multition design pattern functionality. Significant CDS views within the package: View Description YV_ADDICT_SYSTEM_DEFINITIONS Custom ADDICT settings","title":"Object index"},{"location":"rules/","text":"System rules Each system has its own rules. If you need to change the behavior of ADDICT according to the rules of your own system, you have two options. Rules, which can be represented with a single value, are stored in the table YTADDICT_SYDEF (SM30). You can add a new entry to the table YTADDICT_SYDEF (SM30) with the following values: Field Description Default value SYSID ID of your system, found in SY-SYSID MAX_WAIT Max wait time before timeout (in seconds) 30 AUTO_REQUEST_PREFIX The default text prefix of an automatically created request Auto RULE_CLASS Your rule class implementing complex behavior - see below for details YCL_ADDICT_DEF_SYSTEM_RULES Default values are coded into YV_ADDICT_SYSTEM_DEFINITIONS . However, some rules correspond to complex behavior, which need to be coded as ABAP methods. For such rules, ADDICT provides an interface: YIF_ADDICT_SYSTEM_RULES . You can create your own Z-Class, implement this interface and fill its methods. If you implement your own YIF_ADDICT_SYSTEM_RULES class, you need to register it into the table YTADDICT_SYDEF . Otherwise; ADDICT will use the default rule class. YIF_ADDICT_SYSTEM_RULES You can see the interface here . A sample implementation can be seen here . METHODS is_request_toc_safe IMPORTING !trkorr TYPE trkorr RETURNING VALUE(safe) TYPE abap_bool RAISING ycx_addict_class_method. Determines if the request is ToC-Safe or not (Transport of Copies). Generally, you should return ABAP_TRUE here. Case: You might have multiple clients on your development system. Client 100 is the main client used for development + customizing, while client 220 is used by the basis team for authorization. In that case, requests belonging to client 220 are not ToC-Safe. You shouldn't build a ToC on client 100 and include a request from client 220 - if you do that, you will transport an empty authorization schema and delete the authorizations on the target system.","title":"System rules"},{"location":"rules/#system-rules","text":"Each system has its own rules. If you need to change the behavior of ADDICT according to the rules of your own system, you have two options. Rules, which can be represented with a single value, are stored in the table YTADDICT_SYDEF (SM30). You can add a new entry to the table YTADDICT_SYDEF (SM30) with the following values: Field Description Default value SYSID ID of your system, found in SY-SYSID MAX_WAIT Max wait time before timeout (in seconds) 30 AUTO_REQUEST_PREFIX The default text prefix of an automatically created request Auto RULE_CLASS Your rule class implementing complex behavior - see below for details YCL_ADDICT_DEF_SYSTEM_RULES Default values are coded into YV_ADDICT_SYSTEM_DEFINITIONS . However, some rules correspond to complex behavior, which need to be coded as ABAP methods. For such rules, ADDICT provides an interface: YIF_ADDICT_SYSTEM_RULES . You can create your own Z-Class, implement this interface and fill its methods. If you implement your own YIF_ADDICT_SYSTEM_RULES class, you need to register it into the table YTADDICT_SYDEF . Otherwise; ADDICT will use the default rule class.","title":"System rules"},{"location":"rules/#yif_addict_system_rules","text":"You can see the interface here . A sample implementation can be seen here . METHODS is_request_toc_safe IMPORTING !trkorr TYPE trkorr RETURNING VALUE(safe) TYPE abap_bool RAISING ycx_addict_class_method. Determines if the request is ToC-Safe or not (Transport of Copies). Generally, you should return ABAP_TRUE here. Case: You might have multiple clients on your development system. Client 100 is the main client used for development + customizing, while client 220 is used by the basis team for authorization. In that case, requests belonging to client 220 are not ToC-Safe. You shouldn't build a ToC on client 100 and include a request from client 220 - if you do that, you will transport an empty authorization schema and delete the authorizations on the target system.","title":"YIF_ADDICT_SYSTEM_RULES"}]}