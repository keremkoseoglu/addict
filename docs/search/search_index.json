{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ABAP Development & Dictionary This repository includes helpful objects regarding ABAP development & dictionary.","title":"Home"},{"location":"#abap-development-dictionary","text":"This repository includes helpful objects regarding ABAP development & dictionary.","title":"ABAP Development &amp; Dictionary"},{"location":"config/","text":"Configuration ADDICT needs zero configuration. It will run with its default configuration out of the box. So everything below is optional. System rules Check the details of system rules here . Customer development objects ADDICT needs to know which ABAP objects are developed by you. By default, ADDICT will assume that Y- and Z- objects are developed by yourself. However, if you have custom namespaces or something, you should register those (along Y Z ) into the table YTADDICT_NSOBJ . Class definitions YTADDICT_CLASS will allow you to do some optional definitions per ABAP class. Field Description Default value CLSNAME Name of the class DISABLE_INHERIT X = Class will be invisible in inheritance queries of YCL_ADDICT_CLASS","title":"Configuration"},{"location":"config/#configuration","text":"ADDICT needs zero configuration. It will run with its default configuration out of the box. So everything below is optional.","title":"Configuration"},{"location":"config/#system-rules","text":"Check the details of system rules here .","title":"System rules"},{"location":"config/#customer-development-objects","text":"ADDICT needs to know which ABAP objects are developed by you. By default, ADDICT will assume that Y- and Z- objects are developed by yourself. However, if you have custom namespaces or something, you should register those (along Y Z ) into the table YTADDICT_NSOBJ .","title":"Customer development objects"},{"location":"config/#class-definitions","text":"YTADDICT_CLASS will allow you to do some optional definitions per ABAP class. Field Description Default value CLSNAME Name of the class DISABLE_INHERIT X = Class will be invisible in inheritance queries of YCL_ADDICT_CLASS","title":"Class definitions"},{"location":"install/","text":"Installation As a prerequisite, you should install SimBal first. You may install Addict to your system using abapGit . If you are using a ticketing system, it is recommended (but not required) to install and implement TickSys to help with your ticket system management with ABAP.","title":"Installation"},{"location":"install/#installation","text":"As a prerequisite, you should install SimBal first. You may install Addict to your system using abapGit . If you are using a ticketing system, it is recommended (but not required) to install and implement TickSys to help with your ticket system management with ABAP.","title":"Installation"},{"location":"object/","text":"Object index Significant classes within the package: Class Description Relevant T-Code YCL_ADDICT_ALV ALV helper YCL_ADDICT_BDC Batch Input helper SM35 YCL_ADDICT_CLASS Represents an ABAP class SE24 YCL_ADDICT_DATA_ELEMENT Represents a data element SE11 YCL_ADDICT_DOMAIN Represents a domain SE11 YCL_ADDICT_DYNAMIC_ITAB Dynamic internal table helper YCL_ADDICT_PACKAGE Represents an ABAP package SE80 YCL_ADDICT_SE01_READER Reads request status from source system SE01 YCL_ADDICT_TABLE Represents a database table, structure or view SE11 YCL_ADDICT_TABLE_FIELD Represents a field of a table SE11 YCL_ADDICT_TADIR_READER Reads TADIR from the local or remote system SE16 YCL_ADDICT_TEXT_TOOLKIT Provides some useful text utilities YCL_ADDICT_TOOLKIT Provides some useful data dictionary utilities YCL_ADDICT_TPALOG_READER Reads request status from target systems STMS YCL_ADDICT_TRANSPORT_REQUEST Represents a transport request SE01 YCL_ADDICT_TRANSPORT_REQ_IMP Imports a transport request in the target system STMS Most of those objects provide multition design pattern functionality. Significant CDS views within the package: View Description YV_ADDICT_SYSTEM_DEFINITIONS Custom ADDICT settings","title":"Object Index"},{"location":"object/#object-index","text":"Significant classes within the package: Class Description Relevant T-Code YCL_ADDICT_ALV ALV helper YCL_ADDICT_BDC Batch Input helper SM35 YCL_ADDICT_CLASS Represents an ABAP class SE24 YCL_ADDICT_DATA_ELEMENT Represents a data element SE11 YCL_ADDICT_DOMAIN Represents a domain SE11 YCL_ADDICT_DYNAMIC_ITAB Dynamic internal table helper YCL_ADDICT_PACKAGE Represents an ABAP package SE80 YCL_ADDICT_SE01_READER Reads request status from source system SE01 YCL_ADDICT_TABLE Represents a database table, structure or view SE11 YCL_ADDICT_TABLE_FIELD Represents a field of a table SE11 YCL_ADDICT_TADIR_READER Reads TADIR from the local or remote system SE16 YCL_ADDICT_TEXT_TOOLKIT Provides some useful text utilities YCL_ADDICT_TOOLKIT Provides some useful data dictionary utilities YCL_ADDICT_TPALOG_READER Reads request status from target systems STMS YCL_ADDICT_TRANSPORT_REQUEST Represents a transport request SE01 YCL_ADDICT_TRANSPORT_REQ_IMP Imports a transport request in the target system STMS Most of those objects provide multition design pattern functionality. Significant CDS views within the package: View Description YV_ADDICT_SYSTEM_DEFINITIONS Custom ADDICT settings","title":"Object index"},{"location":"rules/","text":"System rules Each system has its own rules. If you need to change the behavior of ADDICT according to the rules of your own system, you have two options. Rules, which can be represented with a single value, are stored in the table YTADDICT_SYDEF (SM30). You can add a new entry to the table YTADDICT_SYDEF (SM30) with the following values: Field Description Default value SYSID ID of your system, found in SY-SYSID MAX_WAIT Max wait time before timeout (in seconds) 30 AUTO_REQUEST_PREFIX The default text prefix of an automatically created request Auto RULE_CLASS Your rule class implementing complex behavior - see below for details YCL_ADDICT_DEF_SYSTEM_RULES Default values are coded into YV_ADDICT_SYSTEM_DEFINITIONS . However, some rules correspond to complex behavior, which need to be coded as ABAP methods. For such rules, ADDICT provides an interface: YIF_ADDICT_SYSTEM_RULES . You can create your own Z-Class, implement this interface and fill its methods. If you implement your own YIF_ADDICT_SYSTEM_RULES class, you need to register it into the table YTADDICT_SYDEF . Otherwise; ADDICT will use the default rule class. YIF_ADDICT_SYSTEM_RULES You can see the interface here . A sample implementation can be seen here . METHODS get_requests_of_tickets IMPORTING !ticket_keys TYPE ticket_key_list RETURNING VALUE(requests) TYPE trkorr_list RAISING ycx_addict_class_method. This method should return a list of transport requests which belong to the given ticket ID's. Hint: A suggested best practice is to put the ticket ID into the transport request description. Preferably as the first \"n\" characters. You can also put the request numbers into tickets, or use a Z-table - but those are less convenient. If you are entering ticket ID's into transport request descriptions, you can query E7* tables. If you are entering request numbers into tickets, you should call a ticketing system API and query tickets to build the request list. If you are mapping requests - tickets through a Z-table, you should query the Z-table. METHODS is_request_toc_safe IMPORTING !trkorr TYPE trkorr RETURNING VALUE(safe) TYPE abap_bool RAISING ycx_addict_class_method. Determines if the request is ToC-Safe or not (Transport of Copies). Generally, you should return ABAP_TRUE here. Case: You might have multiple clients on your development system. Client 100 is the main client used for development + customizing, while client 220 is used by the basis team for authorization. In that case, requests belonging to client 220 are not ToC-Safe. You shouldn't build a ToC on client 100 and include a request from client 220 - if you do that, you will transport an empty authorization schema and delete the authorizations on the target system.","title":"System rules"},{"location":"rules/#system-rules","text":"Each system has its own rules. If you need to change the behavior of ADDICT according to the rules of your own system, you have two options. Rules, which can be represented with a single value, are stored in the table YTADDICT_SYDEF (SM30). You can add a new entry to the table YTADDICT_SYDEF (SM30) with the following values: Field Description Default value SYSID ID of your system, found in SY-SYSID MAX_WAIT Max wait time before timeout (in seconds) 30 AUTO_REQUEST_PREFIX The default text prefix of an automatically created request Auto RULE_CLASS Your rule class implementing complex behavior - see below for details YCL_ADDICT_DEF_SYSTEM_RULES Default values are coded into YV_ADDICT_SYSTEM_DEFINITIONS . However, some rules correspond to complex behavior, which need to be coded as ABAP methods. For such rules, ADDICT provides an interface: YIF_ADDICT_SYSTEM_RULES . You can create your own Z-Class, implement this interface and fill its methods. If you implement your own YIF_ADDICT_SYSTEM_RULES class, you need to register it into the table YTADDICT_SYDEF . Otherwise; ADDICT will use the default rule class.","title":"System rules"},{"location":"rules/#yif_addict_system_rules","text":"You can see the interface here . A sample implementation can be seen here . METHODS get_requests_of_tickets IMPORTING !ticket_keys TYPE ticket_key_list RETURNING VALUE(requests) TYPE trkorr_list RAISING ycx_addict_class_method. This method should return a list of transport requests which belong to the given ticket ID's. Hint: A suggested best practice is to put the ticket ID into the transport request description. Preferably as the first \"n\" characters. You can also put the request numbers into tickets, or use a Z-table - but those are less convenient. If you are entering ticket ID's into transport request descriptions, you can query E7* tables. If you are entering request numbers into tickets, you should call a ticketing system API and query tickets to build the request list. If you are mapping requests - tickets through a Z-table, you should query the Z-table. METHODS is_request_toc_safe IMPORTING !trkorr TYPE trkorr RETURNING VALUE(safe) TYPE abap_bool RAISING ycx_addict_class_method. Determines if the request is ToC-Safe or not (Transport of Copies). Generally, you should return ABAP_TRUE here. Case: You might have multiple clients on your development system. Client 100 is the main client used for development + customizing, while client 220 is used by the basis team for authorization. In that case, requests belonging to client 220 are not ToC-Safe. You shouldn't build a ToC on client 100 and include a request from client 220 - if you do that, you will transport an empty authorization schema and delete the authorizations on the target system.","title":"YIF_ADDICT_SYSTEM_RULES"},{"location":"ticket/","text":"Ticketing system integration Addict provides a basic framework to integrate a ticketing system to SAP. This framework can (optionally) be used directly with TickSys . If you intend to integrate a ticketing system with SAP, the best practice would be: Follow the steps described below Install TickSys for further functionality Assumptions This interface generally assumes that: There is a ticketing system It has APIs which can be called from ABAP Each ticket has its unique ID Tickets have status codes which can be stringified Tickets have assignees Tickets have open / closed status Optional stuff: Tickets may have parent-child relations Tickets may be linked to each other Tickets may be related to SAP TCodes Tickets may be related to SAP modules (MM, SD, etc) Tickets may be viewed over an URL API may enable us to change ticket statuses Tickets may have different types (bug, feature, etc) Tickets may contain instructions regarding SAP transport requests Steps for integration Basically, you need to create Z-implementations of two Y-interfaces. That's it. Obviously, the ticketing system should have corresponding APIs for the functionalities you need to use. YIF_ADDICT_SYSTEM_RULES This interface is responsible to map SAP transport requests with ticket ID's. Implementation guide for this interface is available here . YIF_ADDICT_TICKETING_SYSTEM This interface is responsible for the communication between SAP and the ticketing system. You can see the interface here . For each ticketing system you have, you need to have distinct implementation of this interface. A sample TickSys implementation for Jira can be seen here . Here is a list of methods that need to be implemented. Most are optional; depending on your use case. METHODS is_ticket_id_valid IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(output) TYPE abap_bool RAISING ycx_addict_ticketing_system. Detects if the given ticket ID is valid and returns the result. If this method is called with an invalid ticket ID, it should return SPACE. METHODS can_set_ticket_to_status IMPORTING !ticket_id TYPE yd_addict_ticket_id !status_id TYPE yd_addict_ticket_status_id RETURNING VALUE(result) TYPE abap_bool RAISING ycx_addict_ticketing_system. Determines if the ticket is suitable to be set to the given status code. METHODS get_ticket_header IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(output) TYPE ysaddict_ticket_header RAISING ycx_addict_ticketing_system. Returns ticket header information. Fields to return: Ticket ID Ticket description Status ID Status description Parent ticket ID (if exists) Ticket open / closed flag Ticket type ID Ticket type description SAP module ID SAP module description Current ticket assignee username METHODS get_transport_instructions IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(instructions) TYPE string_list RAISING ycx_addict_ticketing_system. If tickets have fields for SAP transport instructions, this method should return them per ticket ID. METHODS get_sub_tickets IMPORTING !parent TYPE yd_addict_ticket_id RETURNING VALUE(children) TYPE ticket_id_list RAISING ycx_addict_ticketing_system. If the ticketing system supports parent-child relations, this method should return the sub-tickets of the given parent ticket. METHODS get_linked_tickets IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(tickets) TYPE ticket_id_list RAISING ycx_addict_ticketing_system. If the ticketing system supports inter-ticket links, this method should return a table of linked tickets of the given ticket ID. METHODS get_related_tcodes IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(tcodes) TYPE tcode_list RAISING ycx_addict_ticketing_system. If the ticketing system contains a list of related SAP TCodes, this method should return them. METHODS get_tickets_related_to_tcodes IMPORTING !tcodes TYPE tcode_list RETURNING VALUE(tickets) TYPE ticket_id_list RAISING ycx_addict_ticketing_system. If the ticketing system contains a list of related SAP TCodes, this method should return the tickets related to the given SAP TCode. METHODS get_earliest_status IMPORTING !statuses TYPE status_id_list RETURNING VALUE(earliest) TYPE status_dict RAISING ycx_addict_ticketing_system. This method should pick the earliest status in the given status list, and return it. Hint: If this metadata does not exist in the ticketing system, you can create a Z-table containing status codes & their sequence, and return the earliest status from there. METHODS get_tickets_with_status IMPORTING !statuses TYPE status_id_list !types TYPE type_id_list OPTIONAL RETURNING VALUE(tickets) TYPE ticket_status_list RAISING ycx_addict_ticketing_system. This method should query the ticketing system and return the tickets corresponding to the given statuses & types. METHODS set_ticket_status IMPORTING !ticket_id TYPE yd_addict_ticket_id !status_id TYPE yd_addict_ticket_status_id RAISING ycx_addict_ticketing_system. This method should change the ticket status to the given status ID. METHODS set_ticket_assignee IMPORTING !ticket_id TYPE yd_addict_ticket_id assignee TYPE clike RAISING ycx_addict_ticketing_system. This method should set the ticket assignee to the given username. Hint: It is a common practice to map SAP users with ticketing system users over a Z-table. TickSys has such a functionality already. METHODS set_ticket_assignee_for_status IMPORTING !ticket_id TYPE yd_addict_ticket_id !status_id TYPE yd_addict_ticket_status_id RAISING ycx_addict_ticketing_system. This method should set the ticket assignee based on the ticket status. For instance; if the ticket is set to \"Transported to QA\" status, this method should assign the ticket to the user who should run the test. Hint: It is a common practice to map SAP users with ticketing system users over a Z-table. TickSys has such a functionality already. METHODS display_ticket IMPORTING !ticket_id TYPE yd_addict_ticket_id RAISING ycx_addict_ticketing_system. This method should build the URL of the ticket, and open the ticket in a browser. If the ticketing system is not web based, it should call the executable to display the ticket (if possible).","title":"Ticketing system integration"},{"location":"ticket/#ticketing-system-integration","text":"Addict provides a basic framework to integrate a ticketing system to SAP. This framework can (optionally) be used directly with TickSys . If you intend to integrate a ticketing system with SAP, the best practice would be: Follow the steps described below Install TickSys for further functionality","title":"Ticketing system integration"},{"location":"ticket/#assumptions","text":"This interface generally assumes that: There is a ticketing system It has APIs which can be called from ABAP Each ticket has its unique ID Tickets have status codes which can be stringified Tickets have assignees Tickets have open / closed status Optional stuff: Tickets may have parent-child relations Tickets may be linked to each other Tickets may be related to SAP TCodes Tickets may be related to SAP modules (MM, SD, etc) Tickets may be viewed over an URL API may enable us to change ticket statuses Tickets may have different types (bug, feature, etc) Tickets may contain instructions regarding SAP transport requests","title":"Assumptions"},{"location":"ticket/#steps-for-integration","text":"Basically, you need to create Z-implementations of two Y-interfaces. That's it. Obviously, the ticketing system should have corresponding APIs for the functionalities you need to use.","title":"Steps for integration"},{"location":"ticket/#yif_addict_system_rules","text":"This interface is responsible to map SAP transport requests with ticket ID's. Implementation guide for this interface is available here .","title":"YIF_ADDICT_SYSTEM_RULES"},{"location":"ticket/#yif_addict_ticketing_system","text":"This interface is responsible for the communication between SAP and the ticketing system. You can see the interface here . For each ticketing system you have, you need to have distinct implementation of this interface. A sample TickSys implementation for Jira can be seen here . Here is a list of methods that need to be implemented. Most are optional; depending on your use case. METHODS is_ticket_id_valid IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(output) TYPE abap_bool RAISING ycx_addict_ticketing_system. Detects if the given ticket ID is valid and returns the result. If this method is called with an invalid ticket ID, it should return SPACE. METHODS can_set_ticket_to_status IMPORTING !ticket_id TYPE yd_addict_ticket_id !status_id TYPE yd_addict_ticket_status_id RETURNING VALUE(result) TYPE abap_bool RAISING ycx_addict_ticketing_system. Determines if the ticket is suitable to be set to the given status code. METHODS get_ticket_header IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(output) TYPE ysaddict_ticket_header RAISING ycx_addict_ticketing_system. Returns ticket header information. Fields to return: Ticket ID Ticket description Status ID Status description Parent ticket ID (if exists) Ticket open / closed flag Ticket type ID Ticket type description SAP module ID SAP module description Current ticket assignee username METHODS get_transport_instructions IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(instructions) TYPE string_list RAISING ycx_addict_ticketing_system. If tickets have fields for SAP transport instructions, this method should return them per ticket ID. METHODS get_sub_tickets IMPORTING !parent TYPE yd_addict_ticket_id RETURNING VALUE(children) TYPE ticket_id_list RAISING ycx_addict_ticketing_system. If the ticketing system supports parent-child relations, this method should return the sub-tickets of the given parent ticket. METHODS get_linked_tickets IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(tickets) TYPE ticket_id_list RAISING ycx_addict_ticketing_system. If the ticketing system supports inter-ticket links, this method should return a table of linked tickets of the given ticket ID. METHODS get_related_tcodes IMPORTING !ticket_id TYPE yd_addict_ticket_id RETURNING VALUE(tcodes) TYPE tcode_list RAISING ycx_addict_ticketing_system. If the ticketing system contains a list of related SAP TCodes, this method should return them. METHODS get_tickets_related_to_tcodes IMPORTING !tcodes TYPE tcode_list RETURNING VALUE(tickets) TYPE ticket_id_list RAISING ycx_addict_ticketing_system. If the ticketing system contains a list of related SAP TCodes, this method should return the tickets related to the given SAP TCode. METHODS get_earliest_status IMPORTING !statuses TYPE status_id_list RETURNING VALUE(earliest) TYPE status_dict RAISING ycx_addict_ticketing_system. This method should pick the earliest status in the given status list, and return it. Hint: If this metadata does not exist in the ticketing system, you can create a Z-table containing status codes & their sequence, and return the earliest status from there. METHODS get_tickets_with_status IMPORTING !statuses TYPE status_id_list !types TYPE type_id_list OPTIONAL RETURNING VALUE(tickets) TYPE ticket_status_list RAISING ycx_addict_ticketing_system. This method should query the ticketing system and return the tickets corresponding to the given statuses & types. METHODS set_ticket_status IMPORTING !ticket_id TYPE yd_addict_ticket_id !status_id TYPE yd_addict_ticket_status_id RAISING ycx_addict_ticketing_system. This method should change the ticket status to the given status ID. METHODS set_ticket_assignee IMPORTING !ticket_id TYPE yd_addict_ticket_id assignee TYPE clike RAISING ycx_addict_ticketing_system. This method should set the ticket assignee to the given username. Hint: It is a common practice to map SAP users with ticketing system users over a Z-table. TickSys has such a functionality already. METHODS set_ticket_assignee_for_status IMPORTING !ticket_id TYPE yd_addict_ticket_id !status_id TYPE yd_addict_ticket_status_id RAISING ycx_addict_ticketing_system. This method should set the ticket assignee based on the ticket status. For instance; if the ticket is set to \"Transported to QA\" status, this method should assign the ticket to the user who should run the test. Hint: It is a common practice to map SAP users with ticketing system users over a Z-table. TickSys has such a functionality already. METHODS display_ticket IMPORTING !ticket_id TYPE yd_addict_ticket_id RAISING ycx_addict_ticketing_system. This method should build the URL of the ticket, and open the ticket in a browser. If the ticketing system is not web based, it should call the executable to display the ticket (if possible).","title":"YIF_ADDICT_TICKETING_SYSTEM"}]}